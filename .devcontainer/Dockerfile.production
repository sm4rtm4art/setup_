# syntax=docker/dockerfile:1.7
# =============================================================================
# Production Multi-Stage Dockerfile
# Best practices: minimal size, security hardening, single responsibility
# =============================================================================

# Load centralized version configuration
COPY config/versions.conf /tmp/versions.conf

# -----------------------------------------------------------------------------
# Rust Builder Stage
# -----------------------------------------------------------------------------
FROM rust:1.82-slim AS rust-builder

# Source version configuration for consistency
COPY config/versions.conf /tmp/versions.conf
RUN . /tmp/versions.conf && echo "Building Rust service with version: ${RUST_VERSION}"

WORKDIR /build

# Install build dependencies
RUN apt-get update && apt-get install -y \
    pkg-config \
    libssl-dev \
    && rm -rf /var/lib/apt/lists/*

# Copy manifests first for better caching
COPY rust-services/Cargo.toml rust-services/Cargo.lock ./

# Build dependencies only
RUN mkdir src && echo "fn main() {}" > src/main.rs && \
    cargo build --release && \
    rm -rf src

# Copy source and build
COPY rust-services/src ./src
RUN cargo build --release --bin data-lakehouse-service

# -----------------------------------------------------------------------------
# Python Builder Stage
# -----------------------------------------------------------------------------
FROM python:3.12-slim AS python-builder

# Source version configuration
COPY config/versions.conf /tmp/versions.conf
RUN . /tmp/versions.conf && echo "Building Python service with version: ${PYTHON_VERSION}"

# Install uv for fast dependency installation
RUN . /tmp/versions.conf && \
    pip install uv==$UV_VERSION

WORKDIR /build

# Copy requirements first for caching
COPY python-services/pyproject.toml python-services/uv.lock ./

# Install dependencies to a specific directory
RUN uv pip install --system --compile \
    -r pyproject.toml \
    --target /install

# Copy application code
COPY python-services/ ./

# -----------------------------------------------------------------------------
# Java Builder Stage
# -----------------------------------------------------------------------------
FROM eclipse-temurin:21-jdk-alpine AS java-builder

# Source version configuration
COPY config/versions.conf /tmp/versions.conf
RUN . /tmp/versions.conf && echo "Building Java service with Java: ${DEFAULT_JAVA}, Gradle: ${GRADLE_VERSION}"

WORKDIR /build

# Copy gradle/maven files first for caching
COPY java-services/build.gradle* java-services/settings.gradle* ./
COPY java-services/gradle ./gradle

# Download dependencies
RUN ./gradlew dependencies --no-daemon

# Copy source and build
COPY java-services/src ./src
RUN ./gradlew bootJar --no-daemon

# -----------------------------------------------------------------------------
# Runtime Base Image
# -----------------------------------------------------------------------------
FROM debian:12-slim AS runtime-base

# Copy version configuration for runtime use
COPY config/versions.conf /tmp/versions.conf

# Security: Create non-root user
RUN groupadd -r appuser && useradd -r -g appuser appuser

# Install only runtime dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    ca-certificates \
    curl \
    && rm -rf /var/lib/apt/lists/*

# -----------------------------------------------------------------------------
# Rust Service Runtime
# -----------------------------------------------------------------------------
FROM runtime-base AS rust-service

WORKDIR /app

# Copy binary from builder
COPY --from=rust-builder /build/target/release/data-lakehouse-service /usr/local/bin/

# Security: Set ownership
RUN chown -R appuser:appuser /app

USER appuser

EXPOSE 9000

ENTRYPOINT ["data-lakehouse-service"]

# -----------------------------------------------------------------------------
# Python Service Runtime
# -----------------------------------------------------------------------------
FROM python:3.12-slim AS python-service

# Copy version configuration
COPY config/versions.conf /tmp/versions.conf
RUN . /tmp/versions.conf && echo "Python ML service runtime with version: ${PYTHON_VERSION}"

# Install runtime dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    # OCR runtime
    tesseract-ocr \
    tesseract-ocr-eng \
    poppler-utils \
    # Security patches
    && apt-get upgrade -y \
    && rm -rf /var/lib/apt/lists/*

# Create non-root user
RUN groupadd -r appuser && useradd -r -g appuser appuser

WORKDIR /app

# Copy installed packages from builder
COPY --from=python-builder /install /usr/local
COPY --from=python-builder /build /app

# Security: Set ownership
RUN chown -R appuser:appuser /app

USER appuser

EXPOSE 8000

# Use gunicorn for production
CMD ["gunicorn", "main:app", \
     "--bind", "0.0.0.0:8000", \
     "--workers", "4", \
     "--worker-class", "uvicorn.workers.UvicornWorker", \
     "--access-logfile", "-", \
     "--error-logfile", "-"]

# -----------------------------------------------------------------------------
# Java Service Runtime
# -----------------------------------------------------------------------------
FROM eclipse-temurin:21-jre-alpine AS java-service

# Copy version configuration
COPY config/versions.conf /tmp/versions.conf
RUN . /tmp/versions.conf && echo "Java service runtime with version: ${DEFAULT_JAVA}"

# Create non-root user
RUN addgroup -g 1000 appuser && \
    adduser -D -u 1000 -G appuser appuser

WORKDIR /app

# Copy JAR from builder
COPY --from=java-builder /build/build/libs/*.jar app.jar

# Security: Set ownership
RUN chown -R appuser:appuser /app

USER appuser

EXPOSE 8080

# JVM optimizations for containers
ENTRYPOINT ["java", \
    "-XX:MaxRAMPercentage=75.0", \
    "-XX:+UseG1GC", \
    "-XX:+ExitOnOutOfMemoryError", \
    "-Djava.security.egd=file:/dev/./urandom", \
    "-jar", "app.jar"]

# -----------------------------------------------------------------------------
# Nginx API Gateway (Optional)
# -----------------------------------------------------------------------------
FROM nginx:alpine AS api-gateway

# Copy version configuration
COPY config/versions.conf /tmp/versions.conf

# Remove default config
RUN rm /etc/nginx/conf.d/default.conf

# Copy custom nginx config
COPY nginx/nginx.conf /etc/nginx/nginx.conf
COPY nginx/api-gateway.conf /etc/nginx/conf.d/

# Security: Run as non-root
RUN chown -R nginx:nginx /var/cache/nginx && \
    chown -R nginx:nginx /var/log/nginx && \
    chown -R nginx:nginx /etc/nginx/conf.d && \
    touch /var/run/nginx.pid && \
    chown -R nginx:nginx /var/run/nginx.pid

USER nginx

EXPOSE 80

CMD ["nginx", "-g", "daemon off;"]

# -----------------------------------------------------------------------------
# Build Metadata (OCI Compliance)
# -----------------------------------------------------------------------------

# Add build metadata to all final stages
ARG VCS_REF
ARG BUILD_DATE

# Apply to Rust service
FROM rust-service AS rust-service-final
LABEL org.opencontainers.image.title="data-lakehouse-service" \
      org.opencontainers.image.description="Rust data lakehouse service" \
      org.opencontainers.image.revision="$VCS_REF" \
      org.opencontainers.image.created="$BUILD_DATE" \
      org.opencontainers.image.source="https://github.com/martin/setup_tool"

# Apply to Python service  
FROM python-service AS python-service-final
LABEL org.opencontainers.image.title="ml-ai-service" \
      org.opencontainers.image.description="Python ML/AI service" \
      org.opencontainers.image.revision="$VCS_REF" \
      org.opencontainers.image.created="$BUILD_DATE" \
      org.opencontainers.image.source="https://github.com/martin/setup_tool"

# Apply to Java service
FROM java-service AS java-service-final  
LABEL org.opencontainers.image.title="api-service" \
      org.opencontainers.image.description="Java Spring Boot API service" \
      org.opencontainers.image.revision="$VCS_REF" \
      org.opencontainers.image.created="$BUILD_DATE" \
      org.opencontainers.image.source="https://github.com/martin/setup_tool" 