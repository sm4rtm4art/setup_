---
description: 
globs: Dockerfile,*Docker*,*docker*
alwaysApply: false
---
---

description: >-
Comprehensive Docker best-practice rule file covering Dockerfile design,
performance, security, reproducibility, supply‑chain provenance, multi‑arch,
GPU, health‑check observability, and modern Rust / Python (uv) workflows.
Updated June 2025.
globs: Dockerfile,docker-compose.yml,\*.dockerfile
---

# Docker Best Practices (2025 Edition) (2025 Edition)

> **Core principle:** treat containers as *immutable* artifacts—any change produces a new, versioned image.  Everything below flows from that idea.

## 1  Project Layout & Workflow

### 1.1  Directory skeleton

```
project-root/
├── Dockerfile            # or Dockerfile.web, Dockerfile.api …
├── docker-compose.yml    # Compose v2 (no `version:` key needed)
├── .dockerignore         # excludes VCS, build cache, secrets … see below
├── .devcontainer/        # VS Code / Cursor Dev Container config
│   ├── devcontainer.json
│   └── Dockerfile        # delegates to main Dockerfile via Build Kit targets
├── app/                  # src code
├── scripts/              # make, CI helpers
└── SBOM.json             # generated automatically in CI
```

*Keep the build context small:* rely on `.dockerignore` to omit `node_modules`, VCS dirs, build artefacts, IDE caches, and **never** leak `.env` or credentials.

### 1.2  Make or Task runner

Add a concise `Makefile` or `justfile` that wraps `docker build`, `docker compose up`, lints (`hadolint`), scans (`trivy`), signs (`cosign`), and pushes.

### 1.3  Dev Containers

A \`\` lets newcomers clone and hack within one command – automatically matching the production image.

```json
{
  "name": "my‑app‑dev",
  "context": "..",
  "dockerFile": "../Dockerfile",
  "runArgs": ["--platform=linux/amd64,linux/arm64"],
  "mounts": ["source=my-cache,target=/root/.cache,type=volume"],
  "features": { "ghcr.io/devcontainers/features/git:1": {} }
}
```

---

## 2  Dockerfile Construction Patterns

### 2.1  Multi‑stage & BuildKit cache mounts

```dockerfile
# rust + cargo example
FROM rust:1.78-slim AS builder
ENV CARGO_HOME=/cargo
WORKDIR /src

# dependency layer – cached between builds
COPY Cargo.toml Cargo.lock ./
RUN --mount=type=cache,target=/cargo/registry \
    --mount=type=cache,target=/cargo/git \
    cargo fetch

# copy rest of sources & build
COPY . .
RUN --mount=type=cache,target=/cargo/registry \
    --mount=type=cache,target=/cargo/git \
    cargo build --release

# final, minimal runtime
FROM gcr.io/distroless/cc-debian12
COPY --from=builder /src/target/release/app /app
USER 1001:1001
ENTRYPOINT ["/app"]
```

**Secrets at build‑time** (e.g. pulling private crates):

```dockerfile
RUN --mount=type=secret,id=crates_io_token cargo login $(cat /run/secrets/crates_io_token)
```

Enable BuildKit globally (`export DOCKER_BUILDKIT=1 && docker buildx create --use`).

### 2.2  Reproducibility knobs

* Pin base images (`python:3.12-slim-bookworm`, *not* `latest`).
* Add deterministic labels:

```dockerfile
ARG VCS_REF ARG BUILD_DATE ARG APP_VERSION
LABEL org.opencontainers.image.title="my-app" \
      org.opencontainers.image.version="$APP_VERSION" \
      org.opencontainers.image.revision="$VCS_REF" \
      org.opencontainers.image.created="$BUILD_DATE" \
      org.opencontainers.image.source="https://gitlab.com/your-group/your-repo"
```

* Pass `SOURCE_DATE_EPOCH` in CI to strip variable timestamps.

### 2.3  Rootless & Exec form

Run as non‑root **and** document rootless Docker/Podman for hosts where the kernel allows user‑namespaces:

```bash
$ dockerd-rootless-setuptool.sh install
```

Always prefer exec form `ENTRYPOINT ["/usr/bin/tini","--","my-app"]`.

---

## 3  Performance & Image Size

* **Combine commands but keep cacheable layers.**
* Use `--platform linux/amd64,linux/arm64` to emit a multi‑arch manifest in one push – transparent for Apple Silicon laptops and x86 servers.
* If CI is slow, export BuildKit’s inline cache: `docker build --build-arg BUILDKIT_INLINE_CACHE=1 …` then allow downstream builds to reuse it.

---

## 4  Security Hardening & Supply‑chain

1. **Least privilege:** non‑root UID, read‑only FS, drop all caps then add back only those required (`CHOWN`, `NET_BIND_SERVICE`, …).
2. **Scanning:** `trivy image $IMAGE`, `docker scout cves $IMAGE` in CI.
3. **Signing & attestations (GitLab):**

   ```yaml
   include:
     - template: Security/Cosign.gitlab-ci.yml
   stages: [build, sign, deploy]
   sign-image:
     stage: sign
     script:
       - cosign sign --oidc-issuer https://gitlab.com $CI_REGISTRY_IMAGE/$CI_COMMIT_SHA
   ```
4. **SBOM generation:** `syft packages dir:. -o cyclonedx-json > SBOM.json` or simply `docker sbom $IMAGE` (Docker ≥ 24).
5. **Rootless daemon** as belt & braces.

---

## 5  Health Checks & Observability

### 5.1  Dockerfile snippet

```dockerfile
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD curl -f http://localhost/health || exit 1
```

### 5.2  Monitoring matrix

| Environment  | How to view                                   | How to scrape      | Alerting       |
| ------------ | --------------------------------------------- | ------------------ | -------------- |
| Local dev    | `docker compose ps` shows “healthy”           | —                  | —              |
| CI           | `docker events --filter event=health_status`  | GitLab job log     | fail pipeline  |
| Prod Compose | Export `docker events` to Vector → Prometheus | Alertmanager       |                |
| Kubernetes   | Convert to `readinessProbe` / `livenessProbe` | kube‑state‑metrics | PrometheusRule |

---

## 6  Persistent Data – durable by design

* Use **named volumes** for anything that must survive container restarts.

```yaml
services:
  lake:
    image: mylake:latest
    volumes:
      - lake-data:/var/lib/lake
volumes:
  lake-data:
    driver: local
```

* For multi‑host: swap volume for NFS / CSI or an S3‑compatible object store (e.g. MinIO) so the lake persists even if the node disappears.

---

## 7  Multi‑Architecture & Windows/WSL Tips

* Keep all source code *inside* the WSL2 ext4 filesystem (`/home/%USER%/*`) to avoid NTFS I/O slowdown.
* Build multi‑arch images with Buildx/QEMU:

  ```bash
  docker buildx build --platform linux/amd64,linux/arm64 -t registry/lake:$(git rev-parse --short HEAD) --push .
  ```
* Use platform‑specific conditional logic when compiling native libs via `$TARGETARCH` env.

---

## 8  GPU‑ready Profile (opt‑in)

```yaml
services:
  trainer:
    image: ml-trainer:latest
    deploy:
      resources:
        reservations:
          devices:
            - capabilities: ["gpu"]
profiles:
  - gpu
```

Enable with `docker compose --profile gpu up`.  K8s migrations map directly to `nvidia.com/gpu` or `amd.com/gpu` resource requests.

---

## 9  Appendix A – Python (uv) minimal Dockerfile

```dockerfile
FROM python:3.12-slim AS base
RUN pip install uv

WORKDIR /app
COPY pyproject.toml poetry.lock* ./
RUN --mount=type=cache,target=/root/.cache/uv uv pip install --prod

COPY . .
CMD ["python","-m","your_pkg"]
```

---

## 10  Checklist for every commit

*

*Review this document quarterly—best practice evolves!*
